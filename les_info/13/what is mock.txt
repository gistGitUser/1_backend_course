https://vk.com/@simbirsoft_team-moki-dlya-chainikov-terminy-instrumenty-i-hello-world
Коротко о том, что это такое

Mock-объекты (тестовые дублеры) — это объекты, предназначенные для
симуляции поведения реальных объектов во время тестирования.

Тестовые дублеры позволяют:

    зафиксировать тестовое окружение, имитируя неважные, нереализованные,
    нестабильные или медленные внешние объекты (например, БД или сервер),
    совершать проверки своих вызовов (обращений к функциям, свойствам).
Моки (mocks) – более продвинутые заглушки, которые позволяют
контролировать вызов методов, передачу аргументов и
проверку ожидаемого поведения тестируемой системы.
Фейки (fakes) – имитационные объекты, которые имитируют
поведение реальных компонентов, но с упрощенной реализацией.

https://habr.com/ru/articles/577424/
Прежде чем перейти к теме того, когда использовать моки,
давайте обсудим, что такое мок. Люди часто используют
термины тестовый двойник (test double) и мок
(mock) как синонимы, но технически это не так:
Тестовый двойник - это всеобъемлющий термин,
который описывает все виды фальшивых (fake)
зависимостей, непригодных к использованию
в конечном продукте (non-production-ready),
в тестах. Такая зависимость выглядит и ведет
себя как ее аналог, предназначенный для production,
но на самом деле является упрощенной версией,
которая снижает сложность и облегчает тестирование.
Этот термин был введен Джерардом Месаросом в его
книге «xUnit Test Patterns: Refactoring Test Code».
Само название происходит от понятия дублера в кино.

Мок – это лишь один из видов таких зависимостей.

Согласно Жерару Месарошу, существует 5 видов
тестовых двойников:

Пустышка (dummy)
Стаб (stub)
Шпион (spy)
Мок (mock)
Фейк (fake)
SUT - system under test

Когда мокать?

Разобравшись со всеми этими определениями,
давайте поговорим о том, когда вам следует использовать моки.


Использование моков закрепляет контракт взаимодействия между тестируемой
системой и зависимостью. Это именно то, что вам нужно при проверке
связи между вашей системой и внешними приложениями. И наоборот,
использование моков для проверки связи между классами внутри
вашей системы связывает
ваши тесты с деталями реализации, делая их хрупкими.

Различия между моками и стабами:

    Моки помогают имитировать и изучать исходящие взаимодействия: вызовы от SUT к его
    зависимостям, которые изменяют состояние этих зависимостей.

    Стабы помогают имитировать входящие взаимодействия: для получения
    входных данных SUT обращается к своим зависимостям.

    Проверка взаимодействия со стабами всегда приводит к хрупким тестам.

    Тестовые двойники, заменяющие команды CQS, являются моками.
    Тестовые двойники, заменяющие запросы CQS, являются стабами.








