
Mocks test may not reliable but u can fix it

default code looks like

{
			name: "OK",
			body: gin.H{
				"username":  user.Username,
				"password":  password,
				"full_name": user.FullName,
				"email":     user.Email,
			},
			buildStubs: func(store *mockdb.MockStore) {
				arg := db.CreateUserParams{
					Username: user.Username,
					FullName: user.FullName,
					Email:    user.Email,
				}
				store.EXPECT().
					CreateUser(gomock.Any(),gomock.Any()).
					Times(1).
					Return(user, nil)
			},
			checkResponse: func(recorder *httptest.ResponseRecorder) {
				require.Equal(t, http.StatusOK, recorder.Code)
				requireBodyMatchUser(t, recorder.Body, user)
			},


You should view line which contains code

"CreateUser(gomock.Any(),gomock.Any()))."

This code means that it can be successful complete in any case but is bad

We can change parameters and make it's bad, but result be positive this is not what we want

Test must failed if input data incorrect

We can fix using Matcher functionality from gomock package

CreateUser(gomock.Any(),gomock.Any() gomock.Eq(arg)).

we use Eq function for match expected value and args which we get

now if we change arg data our test fail

but we has bcrypt function which has different hash every time which is started
because we must write custom matcher

// A Matcher is a representation of a class of values.
// It is used to represent the valid or expected arguments to a mocked method.
type Matcher interface {
	// Matches returns whether x is a match.
	Matches(x any) bool

	// String describes what the matcher matches.
	String() string
}

As we see matcher has 2 methods accordingly we must implement it.

func (e eqCreateUserParamsMatcher) Matches(x interface{}) bool {
	arg, ok := x.(db.CreateUserParams)
	if !ok {
		return false
	}

	err := util.CheckPassword(e.password, arg.HashedPassword)
	if err != nil {
		return false
	}

	e.arg.HashedPassword = arg.HashedPassword
	return reflect.DeepEqual(e.arg, arg)
}

func (e eqCreateUserParamsMatcher) String() string {
	return fmt.Sprintf("matches arg %v and password %v", e.arg, &e.password)
}

type eqCreateUserParamsMatcher struct {
	arg      db.CreateUserParams
	password string
}

func EqCreateUserParams(arg db.CreateUserParams, password string) gomock.Matcher {
	return eqCreateUserParamsMatcher{arg, password}
}

Essentially we only need add check for hash password and other part is just Deep Equal like in
gomock.Eq function

After that we get more reliable tests







