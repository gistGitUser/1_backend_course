
Тут еще 1 пример когда могут возникнуть дедлоки

-- TX 1
begin;
update accounts set balance = balance - 10 where id = 1 returning *;
update accounts set balance = balance + 10 where id = 2 returning *;

rollback;

-- TX 2

begin;

update accounts set balance = balance - 10 where id = 2 returning *;
update accounts set balance = balance + 10 where id = 1 returning *;

rollback;

Вводим в первом клиенте часть первой транзакции
begin;
update accounts set balance = balance - 10 where id = 1 returning *;

получаем такой вывод

BEGIN
 id | owner  | balance | currency |          created_at
----+--------+---------+----------+-------------------------------
  1 | uetolv |     226 | EUR      | 2023-08-17 11:51:27.177038+00
(1 row)

UPDATE 1

Во втором клиенте вводим

begin;

update accounts set balance = balance - 10 where id = 2 returning *;

и получаем

BEGIN
 id | owner  | balance | currency |          created_at
----+--------+---------+----------+-------------------------------
  2 | drjkjz |     989 | CAD      | 2023-08-17 11:51:27.179862+00
(1 row)

UPDATE 1



в 1 клиенте

update accounts set balance = balance + 10 where id = 2 returning *;

//тут транзакция должна зависнуть

во втором клиенте вводим

update accounts set balance = balance + 10 where id = 1 returning *;

и получаем дедлок

ERROR:  deadlock detected
DETAIL:  Process 154 waits for ShareLock on transaction 2220; blocked by process 78.
Process 78 waits for ShareLock on transaction 2221; blocked by process 154.
HINT:  See server log for query details.
CONTEXT:  while updating tuple (0,1) in relation "accounts"


В целом этой проблемы можно избежать, если транзакции будут выполняться
в одном порядке, а именно всегда будет выполняться условие
что первым идём меньший id

если кратко

то в 1 транзакции мы залочили первый id
а во второй 2 id
потом в первой транзакции мы говорим, что нам нужен 2 id, чтобы продолжить
а во второй транзакии мы говорим, что следующим шагом нам нужно обновить id 1
и в этом моменты мы ловим дедлок, т.к. двум разым транзакциям нужен id который
получил Exclusive lock в другой и не может разблокироваться до тех пор,
пока одна из транзакций не закончится

Чтобы решить эту проблему, можно сделать так, чтобы id в транзакции
всегда шли в восходящем или нисходящем порядке, тогда доступ к id будет
лочится и дедлока не будет









